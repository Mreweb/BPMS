// Importing required modules
import express from "express";
import Web3 from "web3";
import bodyParser from "body-parser";

//const rpcURL = "https://data-seed-prebsc-1-s1.binance.org:8545";
const rpcURL = "https://bsc-testnet-rpc.publicnode.com";
const web3 = new Web3(rpcURL);

const privateKey = "0x4f6d419e841a2a21c72ca84379707fc9926dd344c66ab01bab3866cfc5cd7e07";
if (!web3.utils.isHex(privateKey) || privateKey.length !== 66) {
    console.error("Invalid private key format.");
    process.exit(1);
}

const account = web3.eth.accounts.privateKeyToAccount(privateKey);
web3.eth.accounts.wallet.add(account);

const abi = [
    {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "stateMutability": "payable",
        "type": "fallback"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_a",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "_b",
                "type": "string"
            }
        ],
        "name": "compareStrings",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "pure",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "contractOwner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_proposalId",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "_name",
                "type": "string"
            }
        ],
        "name": "createProposal",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getAllProposal",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "string",
                        "name": "proposalId",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "internalType": "uint256",
                        "name": "voteCount",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct TokenizeVoteContract.Proposal[]",
                "name": "",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_proposalId",
                "type": "string"
            }
        ],
        "name": "getProposal",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "string",
                        "name": "proposalId",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "internalType": "uint256",
                        "name": "voteCount",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct TokenizeVoteContract.Proposal",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "isOwner",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "proposals",
        "outputs": [
            {
                "internalType": "string",
                "name": "proposalId",
                "type": "string"
            },
            {
                "internalType": "string",
                "name": "name",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "voteCount",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_proposalId",
                "type": "string"
            },
            {
                "internalType": "bool",
                "name": "_vote",
                "type": "bool"
            }
        ],
        "name": "voteProposal",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "string",
                        "name": "proposalId",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "internalType": "uint256",
                        "name": "voteCount",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct TokenizeVoteContract.Proposal",
                "name": "",
                "type": "tuple"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "stateMutability": "payable",
        "type": "receive"
    }
];
const byteCode = "";


const app = express();
const port = 3000;
app.use(bodyParser.json());

function serializeBigInt(value) {
    if (typeof value === 'bigint') {
        return value.toString();
    }
    if (Array.isArray(value)) {
        return value.map(serializeBigInt);
    }
    if (value && typeof value === 'object') {
        const serializedObj = {};
        for (const key in value) {
            serializedObj[key] = serializeBigInt(value[key]);
        }
        return serializedObj;
    }
    return value;
}

app.post('/deployContract', async (req, res) => {


    //res.json({ Contract : privateKey});

    try {
        const contract = new web3.eth.Contract(abi);
        // Create deployment transaction
        const deployTx = contract.deploy({
            data: byteCode,
            arguments: []
        });

        // Estimate gas
        const gas = await deployTx.estimateGas({from: account.address});
        const gasPrice = await web3.eth.getGasPrice();

        const tx = {
            from: account.address,
            data: deployTx.encodeABI(),
            gas,
            gasPrice,
        };
        // Sign the transaction
        const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);
        // Send the signed transaction
        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
        console.log("✅ Contract deployed at:", receipt.contractAddress);

        res.json({Contract: receipt.contractAddress});
    } catch (error) {
        res.status(500).json({error: "Deployment failed", message: error.message});
    }

});

app.post('/createProposal/:proposalId/:name/:proposalContractAddress', async (req, res) => {

    let _proposalId = req.params.proposalId;
    let _name = req.params.name;
    let _proposalContractAddress = req.params.proposalContractAddress;
    const contract = new web3.eth.Contract(abi, _proposalContractAddress);

    try {
        const txData = contract.methods.createProposal(_proposalId, _name).encodeABI();

        const gas = await contract.methods.createProposal(_proposalId, _name).estimateGas({from: account.address});
        const gasPrice = await web3.eth.getGasPrice();

        const tx = {
            from: account.address,
            to: _proposalContractAddress,
            gas: gas,
            gasPrice: gasPrice,
            data: txData
        };
        const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);
        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
        res.json({transactionHash: receipt.transactionHash});
    } catch (error) {
        res.status(500).json({error: "Error creating proposal", message: error.message});
    }
});

app.get('/getAllProposals/:proposalContractAddress', async (req, res) => {

    let _proposalContractAddress = req.params.proposalContractAddress;
    const contract = new web3.eth.Contract(abi, _proposalContractAddress);

    try {
        const proposals = await contract.methods.getAllProposal().call();
        res.json({proposals: serializeBigInt(proposals)});
    } catch (error) {
        res.status(500).json({error: "Error fetching proposals", message: error.message});
    }
});

app.get('/getProposal/:proposalId/:proposalContractAddress', async (req, res) => {

    let proposalId = req.params.proposalId;
    let _proposalContractAddress = req.params.proposalContractAddress;
    const contract = new web3.eth.Contract(abi, _proposalContractAddress);

    try {
        const proposal = await contract.methods.getProposal(proposalId).call();
        res.json({proposal: serializeBigInt(proposal)});
    } catch (error) {
        res.status(500).json({error: "Error fetching proposal", message: error.message});
    }
});

app.get('/getTransactionHash/:tx', async (req, res) => {

    let _txHash = req.params.tx;
    try {
        const tx = await web3.eth.getTransaction(_txHash);
        if (!tx) {
            console.log("Transaction not found.");
            return;
        }

        const functionSignature = web3.eth.abi.encodeFunctionSignature('voteProposal(string,string)');
        const input =  tx.input;
        const params = web3.eth.abi.decodeParameters( abi[9].inputs, input.slice(10) );

        res.json({
            "Transaction Hash":  tx.hash,
            "Transaction From":  tx.from,
            "Transaction To (Contract)":  tx.to,
            "Input Data":  tx.input,
            "Proposal Id":  params[0],
            "Vote":   params[1],
        });

    } catch (error) {
        console.error("Error fetching transaction:", error);
    }

});

app.post('/voteProposal/:proposalId/:vote/:proposalContractAddress', async (req, res) => {


    let _proposalId = req.params.proposalId;
    let _vote = req.params.vote;

    let _proposalContractAddress = req.params.proposalContractAddress;
    const contract = new web3.eth.Contract(abi, _proposalContractAddress);


    if (_vote === 1) {
        _vote = true;
    } else{
        _vote = false;
    }

    try {
        const txData = contract.methods.voteProposal(_proposalId, _vote).encodeABI();


        const gas = await contract.methods.voteProposal(_proposalId, _vote).estimateGas({from: account.address});
        const gasPrice = await web3.eth.getGasPrice(); // Get current gas price from the network


        const tx = {
            from: account.address,
            to: _proposalContractAddress,
            gas: gas,
            gasPrice: gasPrice,
            data: txData,
        };
        const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);
        const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
        res.json({transactionHash: receipt.transactionHash});
    } catch (error) {
        res.status(500).json({error: "Error voting on proposal", message: error.message});
    }
});

app.listen(port, () => {
    console.log(`Node.js service is running at http://localhost:${port}`);
});
